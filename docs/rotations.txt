0 -> 1
0 -> 3
1 -> 2
1 -> 0
2 -> 3
2 -> 1
3 -> 2
3 -> 0

as these are changes are purely transitions, a = -(-a)
thus,

0->1 = -(1->0)
1->2 = -(2->1)
2->3 = -(3->2)
3->0 = -(0->3)

thus we can store only 4 transitions. 

Now take the O tetrmino such that:

O = OO
    OO

we now declare a pivot *, says:
O = *O
    OO

Since O tetrimino has same shape for every orientation, the pivot can stay
in the same spot.

Lets say that current orientation can be described as O(x); 0<=x<4
such that:
x=0 -> Spawn State
x=1 -> Right of S.S
x=2 -> 180 of Spawn State
x=3 -> Left of S.S

Lets now generalize this to all tetriminos with Tetrimino(x);

thus for the piece L,

L(0) =   L
       L*L

L(1) = L
       *
       LL

L(2) = L*L
       L

L(3) = LL
        *
        L

we can use a bounding box with the pivot as a center to better visualize this
effect. Note, For L,S,Z,T,and J Tetriminos, the box is 3x3 while it is 4x4 for
O and I tetriminos.

Using the L tetrimio, now draw previous w/ bouinding box.

L(0) = \\L
       L*L
       \\\

L(1) = \L\
       \*\
       \LL

L(2) = \\\
       L*L
       L\\

L(3) = LL\
       \*\
       \L\

Now we can better see the pivot representation. Now we can create a table 
these rotations, which in practice is a translation of each block in a piece.
Thus,
    
      |  1  |  *  |  3  |  4  |
------------------------------------
0>>1  |+1,+1| 0,0 |-1,-1| 0,-2|
1>>2  :+1,-1: 0,0 |-1,+1;-2,0 |
2>>3  |-1,-1| 0,0 |+1,+1| 0,+2|
3>>0  |-1,+1| 0,0 |+1,-1|+2,0 |

    

with this table, we only need to store the pivots coordinates and
the tetrimino's current orientations.

using this fact, lets change the table to utilize position of blocks where
pivot is the origin, thus:

   |  1  |  *  |  3  |  4  |
----------------------------------
0  |-1,0 | 0,0 |+1,0 |+1,+1|
1  | 0,+1| 0,0 | 0,-1|+1,-1|
2  |+1,0 | 0,0 |-1,0 |-1,-1|
3  | 0,-1| 0,0 | 0,+1|-1,+1|

For example, take the L piece with a pivot at (4,10)
graphically, this would look like

00|
01|
02|
03|
..|
..|
..|
08|
09|
10|    *
11|
12|
..|
..|
..|
24|
25|
-------------
   0        9

lets then draw the bounding box:


00|
01|
02|
03|
..|
..|
..|
08|
09|   \\\
10|   \*\
11|   \\\
12|
..|
..|
..|
24|
25|
-------------
   0        9


then lets say L[0], using the chart above and point of pivot, the
points of blocks would be:
B1 = (4,10) + (4-1,10+0) = (3,10)
B2 = (4,10)
$3 = (4,10) + (4+1,10+0) = (5,10)
B4 = (4,10) + (4+1,10+1) = (5,11)

00|
01|
02|
03|
..|
..|
..|
08|
09|   \\L
10|   L*L
11|   \\\
12|
..|
..|
..|
24|
25|
-------------
   0        9


thus to store a Tetrimino:

Struct Tetrimino{
    pivot_position:Position,
    orientation:Orientation, // current orientation of block
    block_table:[Position:4x4] // a flattened 2 array where (orientation,block)
} 
#Note Eventually wall kicks will be implemented 
thus either block_table or new field is added

impl on Tetrimino:
    func rotate(&self,direction:RotationDirection)->[Position:4]:
        let mut positions := self.block_table[orientation:orientation+4]
        for position in positions:
            position += pivot_position
        return position












































